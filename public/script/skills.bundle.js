/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***********************!*\
  !*** ./src/skills.ts ***!
  \***********************/
var js_style = document.createElement("style");
js_style.innerHTML = ".if-js { visibility: inherit; }";
document.head.appendChild(js_style);
var sortable = document.querySelectorAll(".sortable");
sortable.forEach(function (x) { x.addEventListener("click", function () { sort(x); }); });
var selected = null;
var selected_dir = false;
var number_first_collator = new Intl.Collator(undefined, { numeric: true, sensitivity: "base" });
function sort(column_el) {
    var old_class_rm = selected_dir ? "fa-caret-up" : "fa-caret-down";
    if (selected !== column_el) {
        if (selected) {
            selected.querySelector("i").classList.remove(old_class_rm);
            selected.querySelector("i").classList.add("fa-minus");
        }
        selected = column_el;
        selected.querySelector("i").classList.remove("fa-minus");
        selected_dir = false;
    }
    else {
        selected_dir = !selected_dir;
    }
    var class_rm = selected_dir ? "fa-caret-up" : "fa-caret-down";
    var class_add = selected_dir ? "fa-caret-down" : "fa-caret-up";
    column_el.querySelector("i").classList.remove(class_rm);
    column_el.querySelector("i").classList.add(class_add);
    var column_name = Array.from(column_el.classList).reduce(function (x) { if (x.endsWith("-head")) {
        return x.replace("-head", "");
    } });
    var rows = document.querySelectorAll("." + column_name);
    var rows_by_property = {};
    rows.forEach(function (el) {
        var label = el.querySelector("." + column_name + "-content").innerText;
        if (column_name === "experience") {
            switch (label) {
                case "Learning":
                    label = 0;
                    break;
                case "Developing":
                    label = 1;
                    break;
                case "Skilled":
                    label = 2;
                    break;
                case "Expert":
                    label = 3;
                    break;
                default:
                    label = -1;
                    console.warn("Unknown experience label: " + label);
                    break;
            }
            ;
        }
        else if (column_name === "time") {
            var int_label = parseInt(label);
            if (Number.isNaN(int_label)) {
                label = -1;
                console.warn("Time label is not a number: " + label);
            }
            else {
                if (label.includes("hour")) {
                    label = int_label;
                }
                else if (label.includes("day")) {
                    label = int_label * 24;
                }
                else if (label.includes("week")) {
                    label = int_label * 24 * 7;
                }
                else if (label.includes("month")) {
                    label = int_label * 24 * 30;
                }
                else if (label.includes("year")) {
                    label = int_label * 24 * 365;
                }
                else {
                    label = int_label;
                    console.warn("Didn't receive a valid time indicator, assuming hours: " + label);
                }
            }
        }
        var row = el.parentElement;
        rows_by_property[label + row.querySelector(".name-content").innerText] = row;
    });
    var entries = Object.entries(rows_by_property);
    entries.sort(number_first_collator.compare);
    if (selected_dir) {
        entries.reverse();
    }
    document.querySelector("tbody").innerHTML = "";
    entries.forEach(function (_a) {
        var label = _a[0], row = _a[1];
        document.querySelector("tbody").appendChild(row);
    });
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,